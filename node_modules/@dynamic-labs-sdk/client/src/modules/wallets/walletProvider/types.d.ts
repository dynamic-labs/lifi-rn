import type { WalletProviderEnum } from '@dynamic-labs/sdk-api-core';
import type { Chain } from '../../chain';
import type { WalletAccount } from '../walletAccount';
export type WalletProviderMetadata = {
    displayName: string;
    icon: string;
};
export type WalletProvider = {
    /**
     * The chain the wallet provider works with
     */
    chain: Chain;
    /**
     * Connects the dapp to the wallet provider
     */
    connect: () => Promise<{
        addresses: string[];
    }>;
    /**
     * Disconnects the dapp from the wallet provider
     */
    disconnect: () => Promise<void>;
    /**
     * Gets the connected addresses from the wallet provider
     */
    getConnectedAddresses: () => Promise<{
        addresses: string[];
    }>;
    /**
     * Gets the wallet provider type
     */
    getWalletProviderType: () => WalletProviderEnum;
    /**
     * The key to group wallet providers from different chains together
     */
    groupKey: string;
    /**
     * The key of the wallet provider
     */
    key: string;
    /**
     * The metadata of the wallet provider like icon and display name
     */
    metadata: WalletProviderMetadata;
    /**
     * Proves ownership of the wallet account
     */
    proveOwnership: (walletAccount: WalletAccount) => Promise<{
        messageToSign: string;
        signedMessage: string;
    }>;
    /**
     * Signs a message with the wallet account
     */
    signMessage: (args: {
        message: string;
        walletAccount?: WalletAccount;
    }) => Promise<{
        signature: string;
    }>;
};
//# sourceMappingURL=types.d.ts.map