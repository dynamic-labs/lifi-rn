/**
 * A function that maps one error type to another.
 *
 * @param error - The original error to be mapped
 * @returns A new error instance if the error should be transformed, or null if no transformation is needed
 *
 * @example
 * ```typescript
 * const mfaErrorMapper: ErrorMapper = (error) => {
 *   if (error instanceof APIError && error.code === 'mfa_invalid_code') {
 *     return new MfaInvalidOtpError({ cause: error });
 *   }
 *   return null;
 * };
 * ```
 */
export type ErrorMapper = (error: Error) => Error | null;
export type CreateApiClientOptions = {
    /**
     * Array of error mappers that will be applied to API errors in order.
     * Each mapper can transform an error into a different error type or return null to skip transformation.
     *
     * @example
     * ```typescript
     * const apiClient = createApiClient(client, {
     *   errorMappers: [
     *     customErrorMapper,
     *     anotherErrorMapper
     *   ]
     * });
     * ```
     */
    errorMappers?: ErrorMapper[];
    /**
     * Whether to include the MFA token in the request headers.
     *
     * @default false
     */
    includeMfaToken?: boolean;
};
//# sourceMappingURL=types.d.ts.map