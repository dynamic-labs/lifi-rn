import type { DynamicClient } from '../../client/types';
import type { DynamicEvents } from './types';
/**
 * Listen to an event from the client.
 *
 * @returns A function that can be called to remove the listener.
 */
export declare const onEvent: <E extends keyof DynamicEvents>(client: DynamicClient, event: E, listener: DynamicEvents[E]) => () => void;
/**
 * Remove a listener from an event.
 */
export declare const offEvent: <E extends keyof DynamicEvents>(client: DynamicClient, event: E, listener: DynamicEvents[E]) => void;
/**
 * Listen to an event that will only fire once.
 *
 * @returns A function that can be called to remove the listener.
 */
export declare const onceEvent: <E extends keyof DynamicEvents>(client: DynamicClient, event: E, listener: DynamicEvents[E]) => () => void;
/**
 * Emit an event.
 */
export declare const emitEvent: <E extends keyof DynamicEvents>(client: DynamicClient, event: E, ...args: Parameters<DynamicEvents[E]>) => void;
//# sourceMappingURL=events.d.ts.map