import { type EventEmitter } from 'eventemitter3';
export type AsyncProcessStatus = 'pending' | 'resolved' | 'failed';
export type AsyncTrackEmitter = EventEmitter<{
    /**
     * Emitted when a specific async process fails.
     * @param name - The identifier for the async process
     * @param error - The error that occurred
     */
    failed: (name: string, error: unknown) => void;
    /**
     * Emitted when a specific async process completes.
     * @param name - The identifier for the async resolves
     */
    resolved: (name: string) => void;
}>;
/**
 * A tracker that associates names with promises and raises events as promises resolve.
 */
export type AsyncTrack = {
    /**
     * Gets the map of all registered async processes.
     */
    getTracker: () => Map<string, AsyncProcessStatus>;
    /**
     * Tracks a specific async process.
     */
    track: (props: {
        /**
         * The identifier for the async process
         */
        name: string;
        /**
         * The promise representing the async process
         */
        promise: Promise<unknown>;
    }) => void;
    /**
     * Waits for all registered async processes to complete.
     *
     * Resolves when all processes are resolved, rejects with
     * the respective error when the first process fails.
     */
    waitForAll: () => Promise<void>;
} & Pick<AsyncTrackEmitter, 'on' | 'off'>;
//# sourceMappingURL=types.d.ts.map