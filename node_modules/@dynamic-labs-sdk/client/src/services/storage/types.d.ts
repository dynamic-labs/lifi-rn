import type * as z from '@zod/mini';
/**
 * The store item definition is used to identify in which key
 * the value should be stored and the validation schema of the value.
 */
export type StorageKeySchema<T> = {
    key: string;
    schema: z.ZodMiniType<T>;
};
/**
 * Set of methods used to store and retrieve items from a storage medium.
 */
export type Storage = {
    /**
     * Gets an item from storage.
     */
    getItem: <T>(storageKeySchema: StorageKeySchema<T>) => Promise<T | null>;
    /**
     * Removes an item from storage.
     */
    removeItem: <T>(storageKeySchema: StorageKeySchema<T>) => Promise<void>;
    /**
     * Sets an item in storage.
     */
    setItem: <T>(storageKeySchema: StorageKeySchema<T>, value: T) => Promise<void>;
};
/**
 * How values are formatted before being stored.
 */
export type StorageFormat<T> = {
    value: T;
};
//# sourceMappingURL=types.d.ts.map