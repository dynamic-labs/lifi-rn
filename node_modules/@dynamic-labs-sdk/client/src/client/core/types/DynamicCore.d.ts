import type EventEmitter from 'eventemitter3';
import type { AsyncTrack } from '../../../services/asyncTrack';
import type { Fetch } from '../../../services/fetch';
import type { Logger } from '../../../services/logger';
import type { NavigationHandler } from '../../../services/navigate';
import type { OpenDeeplink } from '../../../services/openDeeplink';
import type { PasskeyService } from '../../../services/passkey';
import type { RuntimeServices } from '../../../services/runtimeServices';
import type { Storage } from '../../../services/storage/types';
import type { ObservableState } from '../../../utils/observable/types';
import type { DynamicClientConfig } from '../../types/DynamicClientConfig';
import type { DynamicCoreState } from './DynamicCoreState';
/**
 * The core object needed to work with Dynamic SDK's functionality.
 *
 * Holds all state and services any module might need to use.
 */
export type DynamicCore = {
    /**
     * The base URL to use for API requests to Dynamic.
     */
    apiBaseUrl: string;
    /**
     * The environment ID of the Dynamic app.
     */
    environmentId: string;
    /**
     * A generic event emitter instance for handling events.
     */
    eventEmitter: EventEmitter;
    /**
     * What extensions have been applied to this client.
     */
    extensions: Set<string>;
    /**
     * Instance of the fetch service, used for making any HTTP requests.
     */
    fetch: Fetch;
    /**
     * Custom headers to be sent with API requests.
     */
    getApiHeaders: () => Record<string, string>;
    /**
     * Instance of the async track service, used for tracking status of SDK initialization promises.
     */
    initTrack: AsyncTrack;
    /**
     * Instance of the logger service, used for logging messages to the console and controlling the log level.
     */
    logger: Logger;
    /**
     * The current metadata of the app.
     */
    metadata: DynamicClientConfig['metadata'];
    /**
     * Instance of the navigation service, used for triggering window navigation.
     */
    navigate: NavigationHandler;
    /**
     * Instance of the open deeplink service, used for triggering deeplinks using the appropriate device method.
     */
    openDeeplink: OpenDeeplink;
    /**
     * Instance of the passkey service, used for prompting the user with passkey authentication.
     */
    passkey: PasskeyService;
    /**
     * Instance of the runtime services, used for registering and accessing services.
     */
    runtimeServices: RuntimeServices;
    /**
     * Reactive object with all variable state of the client.
     */
    state: ObservableState<DynamicCoreState>;
    /**
     * Instance of the storage service, used for interacting with the device's storage.
     */
    storage: Storage;
    /**
     * The NPM version of the Dynamic SDK client package.
     */
    version: string;
};
//# sourceMappingURL=DynamicCore.d.ts.map