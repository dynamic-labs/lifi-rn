/**
 * An object that can be subscribed to for changes.
 */
export type ObservableState<T extends Record<string, unknown>> = {
    /**
     * Get the current state.
     */
    get: () => Readonly<T>;
    /**
     * Get the initial state.
     */
    getInitialState: () => Readonly<T>;
    /**
     * Partially update the state.
     */
    set: (value: Partial<T>) => void;
    /**
     * Subscribe to changes.
     *
     * Returns a function to unsubscribe the callback.
     */
    subscribe: (callback: (value: Readonly<T>, previous: Readonly<T>) => void) => VoidFunction;
    /**
     * Unsubscribe from changes.
     */
    unsubscribe: (callback: (value: Readonly<T>, previous: Readonly<T>) => void) => void;
};
//# sourceMappingURL=types.d.ts.map