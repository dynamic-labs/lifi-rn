import type { ObservableState } from '../types';
/**
 * Allows subscribing to a slice of the state.
 * The slice is a computation of the states.
 *
 * The callback will only be called when the slice has changed.
 * Change is determined by shallow comparison.
 *
 * Returns a function to unsubscribe the callback.
 */
export declare const subscribeWithSelector: <T extends Record<string, unknown>, Slice>(observable: ObservableState<T>, selector: (value: T) => Slice) => (callback: (slice: Slice) => void) => VoidFunction;
//# sourceMappingURL=subscribeWithSelector.d.ts.map