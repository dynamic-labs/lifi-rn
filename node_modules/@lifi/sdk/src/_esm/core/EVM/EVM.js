import { ChainType } from '@lifi/types';
import { isAddress } from 'viem';
import { EVMStepExecutor } from './EVMStepExecutor.js';
import { getEVMBalance } from './getEVMBalance.js';
import { resolveEVMAddress } from './resolveEVMAddress.js';
export function EVM(options) {
    const _options = options ?? {};
    return {
        get type() {
            return ChainType.EVM;
        },
        get options() {
            return _options;
        },
        isAddress,
        resolveAddress: resolveEVMAddress,
        getBalance: getEVMBalance,
        getWalletClient: _options.getWalletClient,
        async getStepExecutor(options) {
            if (!_options.getWalletClient) {
                throw new Error('Client is not provided.');
            }
            const walletClient = await _options.getWalletClient();
            const executor = new EVMStepExecutor({
                client: walletClient,
                routeId: options.routeId,
                executionOptions: {
                    ...options.executionOptions,
                    switchChainHook: _options.switchChain ?? options.executionOptions?.switchChainHook,
                },
            });
            return executor;
        },
        setOptions(options) {
            Object.assign(_options, options);
        },
    };
}
//# sourceMappingURL=EVM.js.map