import type { Hex } from 'viem';
export declare const MaxAllowanceTransferAmount: bigint;
export declare const MaxAllowanceExpiration: bigint;
export declare const MaxOrderedNonce: bigint;
export declare const MaxSignatureTransferAmount: bigint;
export declare const MaxUnorderedNonce: bigint;
export declare const MaxSigDeadline: bigint;
export declare const InstantExpiration = 0n;
export declare const EIP_2612_PERMIT_SELECTOR = "0xd505accf";
export declare const DAI_PERMIT_SELECTOR = "0x8fcbaf0c";
/**
 * EIP-712 domain typehash with chainId
 * @link https://eips.ethereum.org/EIPS/eip-712#specification
 *
 * keccak256(toBytes(
 *   'EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'
 * ))
 */
export declare const EIP712_DOMAIN_TYPEHASH: Hex;
/**
 * EIP-712 domain typehash with salt (e.g. USDC.e on Polygon)
 * @link https://eips.ethereum.org/EIPS/eip-712#specification
 *
 * keccak256(toBytes(
 *   'EIP712Domain(string name,string version,address verifyingContract,bytes32 salt)'
 * ))
 */
export declare const EIP712_DOMAIN_TYPEHASH_WITH_SALT: Hex;
export declare const EIP712_DOMAINS_WITHOUT_VERSION: `0x${string}`[];
/**
 * @signature Permit(address holder,address spender,uint256 nonce,uint256 expiry,bool allowed)
 * */
export declare const DAI_LIKE_PERMIT_TYPEHASH: Hex;
/**
 * @example `${tokenAddress}:${chainId}.toLowerCase()`
 * @warning Only toLowerCase string
 * */
export declare const TOKEN_ADDRESSES_WITH_SALT: string[];
export declare const eip2612Types: {
    readonly Permit: readonly [{
        readonly name: "owner";
        readonly type: "address";
    }, {
        readonly name: "spender";
        readonly type: "address";
    }, {
        readonly name: "value";
        readonly type: "uint256";
    }, {
        readonly name: "nonce";
        readonly type: "uint256";
    }, {
        readonly name: "deadline";
        readonly type: "uint256";
    }];
};
export declare const daiPermitTypes: {
    readonly Permit: readonly [{
        readonly name: "holder";
        readonly type: "address";
    }, {
        readonly name: "spender";
        readonly type: "address";
    }, {
        readonly name: "nonce";
        readonly type: "uint256";
    }, {
        readonly name: "expiry";
        readonly type: "uint256";
    }, {
        readonly name: "allowed";
        readonly type: "bool";
    }];
};
//# sourceMappingURL=constants.d.ts.map