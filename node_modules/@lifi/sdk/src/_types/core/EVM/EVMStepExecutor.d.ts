import type { ExtendedChain } from '@lifi/types';
import type { Client } from 'viem';
import { BaseStepExecutor } from '../BaseStepExecutor.js';
import type { LiFiStepExtended, Process, StepExecutorOptions } from '../types.js';
export interface EVMStepExecutorOptions extends StepExecutorOptions {
    client: Client;
}
export declare class EVMStepExecutor extends BaseStepExecutor {
    private client;
    constructor(options: EVMStepExecutorOptions);
    checkClient: (step: LiFiStepExtended, process?: Process) => Promise<Client | undefined>;
    waitForTransaction: ({ step, process, fromChain, toChain, isBridgeExecution, }: {
        step: LiFiStepExtended;
        process: Process;
        fromChain: ExtendedChain;
        toChain: ExtendedChain;
        isBridgeExecution: boolean;
    }) => Promise<void>;
    private getUpdatedStep;
    executeStep: (step: LiFiStepExtended, atomicityNotReady?: boolean) => Promise<LiFiStepExtended>;
}
//# sourceMappingURL=EVMStepExecutor.d.ts.map