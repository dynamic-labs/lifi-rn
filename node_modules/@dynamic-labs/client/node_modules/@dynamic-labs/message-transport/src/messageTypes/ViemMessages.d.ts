type Hex = `0x${string}`;
type ByteArray = Uint8Array;
type SignableMessage = string | {
    raw: Hex | ByteArray;
};
type TransactionSerializable = {
    to?: Hex | null;
    data?: Hex;
    value?: bigint;
    [key: string]: unknown;
};
type TypedDataParameter = {
    name: string;
    type: string;
};
export type TypedData = {
    types: {
        [key: string]: TypedDataParameter[];
    };
    primaryType: string;
    domain: {
        name?: string;
        version?: string;
        chainId?: number;
        verifyingContract?: Hex;
        salt?: Hex;
    };
    message: Record<string, unknown>;
};
type SignAuthorizationReturnType = {
    address: Hex;
    chainId: number;
    nonce: number;
    r: Hex;
    s: Hex;
    v?: bigint;
    yParity?: number;
};
type SignAuthorizationParametersWithoutPrivateKey = {
    address?: Hex;
    contractAddress?: Hex;
    chainId: number;
    nonce: number;
};
export type ViemMessages = {
    viem_signAuthorization: (walletId: string, parameters: SignAuthorizationParametersWithoutPrivateKey) => Promise<SignAuthorizationReturnType>;
    viem_signMessage: (walletId: string, message: SignableMessage) => Promise<Hex>;
    viem_signTransaction: (walletId: string, transaction: TransactionSerializable) => Promise<Hex>;
    viem_signTypedData: (walletId: string, typedData: TypedData) => Promise<Hex>;
};
export {};
