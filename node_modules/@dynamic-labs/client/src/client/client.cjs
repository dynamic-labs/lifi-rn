'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var logger = require('@dynamic-labs/logger');
var messageTransport = require('@dynamic-labs/message-transport');
var authModule = require('../modules/authModule/authModule.cjs');
var instrumentationModule = require('../modules/instrumentationModule/instrumentationModule.cjs');
var mfaModule = require('../modules/mfaModule/mfaModule.cjs');
var networksModule = require('../modules/networksModule/networksModule.cjs');
var passkeysModule = require('../modules/passkeysModule/passkeysModule.cjs');
var sdkModule = require('../modules/sdkModule/sdkModule.cjs');
var userInterfaceModule = require('../modules/userInterfaceModule/userInterfaceModule.cjs');
var walletsModule = require('../modules/walletsModule/walletsModule.cjs');
var Extendable = require('../utils/Extendable/Extendable.cjs');
var setupFetchHandler = require('../utils/setupFetchHandler/setupFetchHandler.cjs');
var setupLogHandler = require('../utils/setupLogHandler/setupLogHandler.cjs');
var core = require('./core/core.cjs');

const baseClientExtensionName = 'base';
/**
 * Generates a basic client that allows interacting with Dynamic's SDK, which
 * will be rendered inside a webview.
 *
 * It must be extended with the necessary Extensions that implement the services
 * it will be used for.
 */
const createClient = (props) => {
    var _a;
    const instrumentation = instrumentationModule.setupInstrumentationModule(props);
    const core$1 = core.createCore(props);
    instrumentation.trackCore(core$1);
    setupLogHandler.setupLogHandler(core$1);
    setupFetchHandler.setupFetchHandler(core$1);
    const baseExtendable = new Extendable.Extendable(core$1);
    const client = baseExtendable.extend(() => {
        core$1.declaredExtensionNames.push(baseClientExtensionName);
        return {
            /** Module that gives access over authentication state, such as the auth token and user */
            auth: authModule.createAuthModule(core$1),
            /** Module that provides access to MFA features */
            mfa: mfaModule.createMfaModule(core$1),
            /** Module that provides all the networks configured */
            networks: networksModule.createNetworksModule(core$1),
            /** Module that provides access to passkeys */
            passkeys: passkeysModule.createPasskeysModule(core$1),
            /** Module that gives insight over the state of the SDK */
            sdk: sdkModule.createSdkModule(core$1),
            /** Module that provide access to UI features */
            ui: userInterfaceModule.createUserInterfaceModule(core$1),
            /** Module that provides access to user's wallets */
            wallets: walletsModule.createWalletsModule(core$1),
        };
    });
    instrumentation.trackClient(client);
    if ((_a = props.debug) === null || _a === void 0 ? void 0 : _a.messageTransport) {
        messageTransport.setGlobalDebugEnabled(true);
        logger.Logger.troubleshootModeEnabled = true;
    }
    return client;
};

exports.baseClientExtensionName = baseClientExtensionName;
exports.createClient = createClient;
