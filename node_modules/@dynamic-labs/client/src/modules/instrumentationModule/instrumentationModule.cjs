'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var reactivity = require('@vue/reactivity');
var logger = require('@dynamic-labs/logger');
var _package = require('../../../package.cjs');

const setupInstrumentationModule = (clientProps) => {
    var _a;
    logger.Logger.setEnvironmentId(clientProps.environmentId);
    logger.Logger.globalMetaData.set('platform-origin', 'host');
    logger.Logger.globalMetaData.set('client-version', _package.version);
    logger.Logger.globalMetaData.set('app-name', clientProps.appName);
    if (((_a = clientProps.debug) === null || _a === void 0 ? void 0 : _a.loggerLevel) !== undefined) {
        logger.Logger.setLogLevel(clientProps.debug.loggerLevel);
    }
    return {
        trackClient: (client) => {
            client.sdk.on('loadedChanged', (loaded) => {
                logger.Logger.globalMetaData.set('sdk-loaded', loaded);
            });
            client.auth.on('authenticatedUserChanged', (user) => {
                logger.Logger.globalMetaData.set('user-id', user === null || user === void 0 ? void 0 : user.userId);
            });
        },
        trackCore: (core) => {
            reactivity.effect(() => {
                logger.Logger.globalMetaData.set('declared-extension-names', core.declaredExtensionNames);
            });
            reactivity.effect(() => {
                var _a;
                logger.Logger.globalMetaData.set('initialization-error', (_a = core.initialization.error) === null || _a === void 0 ? void 0 : _a.toString());
            });
        },
    };
};

exports.setupInstrumentationModule = setupInstrumentationModule;
