import { AuthModuleMessages, AuthModuleState, PickedEventListeners, StoreEventListeners, authEventNames } from '@dynamic-labs/message-transport';
import type { UserProfile } from '@dynamic-labs/types';
import { Core } from '../../client/core';
import { EmailAuthModule } from './emailAuthModule';
import { ExternalAuthModule } from './externalAuthModule';
import { PasskeyAuthModule } from './passkeyAuthModule';
import { SmsAuthModule } from './smsAuthModule';
import { SocialAuthModule } from './socialAuthModule';
type PublicAuthModuleMessages = Pick<AuthModuleMessages, typeof authEventNames[number]>;
export type AuthModule = AuthModuleState & StoreEventListeners<AuthModuleState> & PickedEventListeners<PublicAuthModuleMessages> & {
    passkey: PasskeyAuthModule;
    sms: SmsAuthModule;
    email: EmailAuthModule;
    social: SocialAuthModule;
    external: ExternalAuthModule;
    logout: AuthModuleMessages['logout'];
    refreshUser: AuthModuleMessages['refreshUser'];
    permanentlyDeleteCurrentUser: AuthModuleMessages['permanentlyDeleteCurrentUser'];
    setHandler: (name: 'userAuthenticated', handler: AuthenticatedUserHandler) => void;
    clearHandler: (name: 'userAuthenticated') => void;
};
type AuthenticatedUserHandler = (user: UserProfile) => Promise<void>;
export declare const createAuthModule: (core: Core) => AuthModule;
export {};
