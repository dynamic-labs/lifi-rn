'use client'
import { formatEther } from 'viem';
import { WalletConnectorBase } from '@dynamic-labs/wallet-connector-core';
import { DynamicError } from '@dynamic-labs/utils';
import { EthereumWallet, createViemUiTransaction } from '@dynamic-labs/ethereum-core';

class AccountAbstractionBaseConnector extends WalletConnectorBase {
    constructor(opts) {
        super({ walletBook: opts.walletBook });
        this._isGasSponsorshipDisabled = false;
        this.evmNetworks = [];
        this.ChainWallet = EthereumWallet;
        this.isEmbeddedWallet = true;
        this.connectedChain = 'EVM';
        this.supportedChains = ['ETH', 'EVM'];
        this._walletUiUtils = opts.walletUiUtils;
        this.evmNetworks = opts.evmNetworks;
    }
    /**
     * Gets the EOA connector associated with this account abstraction wallet
     * @deprecated Use getEOAConnector with a specific smart contract wallet address instead
     */
    getEOAConnector() {
        return this.eoaConnector;
    }
    /**
     * Disables gas sponsorship for the next transaction
     */
    disableGasSponsorshipOnce() {
        this._isGasSponsorshipDisabled = true;
    }
    /**
     * Protected method to check if gas sponsorship is disabled
     */
    isGasSponsorshipDisabled() {
        return this._isGasSponsorshipDisabled;
    }
    /**
     * Gets the enabled networks
     */
    getEnabledNetworks() {
        return this.evmNetworks;
    }
    /**
     * Gets the signer for the current wallet
     */
    async getSigner() {
        return this.getWalletClient();
    }
    /**
     * Gets the balance for an address
     */
    async getBalance(address) {
        const publicClient = await this.getPublicClient();
        if (!publicClient) {
            throw new DynamicError('No public client available');
        }
        const balance = await publicClient.getBalance({ address });
        return formatEther(balance);
    }
    /**
     * Validates that the expected wallet is active
     */
    async validateActiveWallet(expectedAddress) {
        const currentAddress = await this.getAddress();
        if (currentAddress?.toLowerCase() !== expectedAddress.toLowerCase()) {
            throw new DynamicError('Invalid active wallet');
        }
    }
    async createUiTransaction(from) {
        await this.validateActiveWallet(from);
        const walletClient = this.getWalletClient();
        const publicClient = await this.getPublicClient();
        if (!publicClient || !walletClient) {
            throw new DynamicError('No public client available');
        }
        return createViemUiTransaction({
            from,
            publicClient: publicClient,
            walletClient: walletClient,
        });
    }
    async getBlockExplorerUrlsForCurrentNetwork() {
        return this.eoaConnector?.getBlockExplorerUrlsForCurrentNetwork() ?? [];
    }
}

export { AccountAbstractionBaseConnector };
