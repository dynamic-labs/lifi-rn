import { Chain, InternalWalletConnector, WalletConnectorBase } from '@dynamic-labs/wallet-connector-core';
import { EthereumWallet } from '@dynamic-labs/ethereum-core';
import { IUITransaction, WalletUiUtils, GenericNetwork } from '@dynamic-labs/types';
import { SmartWalletProperties } from '@dynamic-labs/sdk-api-core';
import { AccountAbstractionConnectorProps } from '../types';
export declare abstract class AccountAbstractionBaseConnector extends WalletConnectorBase<typeof EthereumWallet> {
    abstract eoaConnector: InternalWalletConnector | undefined;
    abstract eoaAddress: string | undefined;
    protected _walletUiUtils: WalletUiUtils<InternalWalletConnector>;
    private _isGasSponsorshipDisabled;
    protected evmNetworks: GenericNetwork[];
    ChainWallet: typeof EthereumWallet;
    isEmbeddedWallet: boolean;
    connectedChain: Chain;
    supportedChains: Chain[];
    constructor(opts: AccountAbstractionConnectorProps);
    /**
     * Gets the EOA connector associated with this account abstraction wallet
     * @deprecated Use getEOAConnector with a specific smart contract wallet address instead
     */
    getEOAConnector(): InternalWalletConnector | undefined;
    /**
     * Disables gas sponsorship for the next transaction
     */
    disableGasSponsorshipOnce(): void;
    /**
     * Protected method to check if gas sponsorship is disabled
     */
    protected isGasSponsorshipDisabled(): boolean;
    /**
     * Gets the enabled networks
     */
    getEnabledNetworks(): GenericNetwork[];
    /**
     * Gets the signer for the current wallet
     */
    getSigner(): Promise<unknown>;
    /**
     * Gets the balance for an address
     */
    getBalance(address: string): Promise<string | undefined>;
    /**
     * Validates that the expected wallet is active
     */
    validateActiveWallet(expectedAddress: string): Promise<void>;
    abstract canSponsorTransactionGas(transaction: {
        from: string;
        to?: string;
        value?: bigint;
        data?: string;
    }): Promise<boolean>;
    createUiTransaction(from: string): Promise<IUITransaction>;
    getBlockExplorerUrlsForCurrentNetwork(): Promise<string[]>;
    abstract getAccountAbstractionProvider<T>({ withSponsorship, }: {
        withSponsorship: boolean;
    }): Promise<T>;
    abstract initialize(params: {
        smartWalletAddress: string;
        eoaAddress: string;
        eoaConnector: InternalWalletConnector;
        properties?: SmartWalletProperties;
        shouldSetEoaConnector?: boolean;
    }): Promise<void>;
}
//# sourceMappingURL=AccountAbstractionBaseConnector.d.ts.map