'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../_virtual/_tslib.cjs');
var ethereumCore = require('@dynamic-labs/ethereum-core');
var logger = require('./logger.cjs');

const CACHED_CHAIN_ID_KEY = 'dynamic_zd_chain_id';
const getCachedChainIdKey = (projectId) => `${CACHED_CHAIN_ID_KEY}-${projectId}`;
const fetchZeroDevChain = (projectId) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
    try {
        const cacheKey = getCachedChainIdKey(projectId);
        const cachedChainId = localStorage.getItem(cacheKey);
        if (cachedChainId) {
            return ethereumCore.chainsMap[cachedChainId];
        }
        const response = yield (yield fetch(`https://prod-api.zerodev.app/projects/${projectId}`)).json();
        localStorage.setItem(cacheKey, response.chainId);
        return ethereumCore.chainsMap[response.chainId];
    }
    catch (err) {
        logger.logger.error('Failed to fetch ZeroDev project settings from ZeroDev API ' +
            'This is needed to fetch the chain id so that we know which chain the smart contract is on');
        throw err;
    }
});

exports.fetchZeroDevChain = fetchZeroDevChain;
exports.getCachedChainIdKey = getCachedChainIdKey;
