import { SmartAccount, EntryPointVersion } from 'viem/account-abstraction';
import { KernelAccountClient } from '@zerodev/sdk/clients';
import { type Chain as ViemChain } from 'viem/chains';
import { Address, WalletClient, Account, type Chain, type Client, type RpcSchema, type Transport } from 'viem';
import { EntryPointType, GetKernelVersion } from '@zerodev/sdk/types';
import { SignAuthorizationReturnType } from 'viem/experimental';
export type BundlerProvider = 'STACKUP' | 'PIMLICO' | 'ALCHEMY' | 'GELATO';
export type ERC20Paymaster = Address;
export type PaymasterType = 'NONE' | 'SPONSOR' | ERC20Paymaster;
export declare const getZeroDevBundlerRPC: (projectId: string, provider?: BundlerProvider) => string;
export declare const getZeroDevPaymasterRPC: (projectId: string, provider?: BundlerProvider) => string;
type CommonClientParams<TChain extends Chain | undefined = Chain | undefined> = {
    bundlerRpc?: string;
    chain: TChain;
    projectId: string;
    signer: WalletClient<Transport, ViemChain, Account>;
    paymaster: PaymasterType;
    paymasterRpc?: string;
    entryPoint: EntryPointType<EntryPointVersion>;
    provider?: BundlerProvider;
    kernelVersion: GetKernelVersion<EntryPointVersion>;
    ecdsaValidator: any;
    enableKernelV3Migration: boolean;
};
export declare const createEcdsaKernelAccountClient: <entryPoint extends EntryPointVersion, TChain extends ViemChain | undefined = ViemChain | undefined>({ bundlerRpc, chain, paymasterRpc, projectId, signer, provider, paymaster, entryPoint, kernelVersion, ecdsaValidator, enableKernelV3Migration, }: CommonClientParams<TChain>) => Promise<KernelAccountClient<Transport, ViemChain, SmartAccount, Client, RpcSchema>>;
export declare const createEcdsaKernelAccountClientWith7702: <TChain extends ViemChain | undefined = ViemChain | undefined>({ bundlerRpc, chain, paymasterRpc, projectId, signer, provider, authorization, paymaster, entryPoint, kernelVersion, ecdsaValidator, }: CommonClientParams<TChain> & {
    authorization?: SignAuthorizationReturnType;
}) => Promise<KernelAccountClient<Transport, ViemChain, SmartAccount, Client, RpcSchema>>;
export {};
