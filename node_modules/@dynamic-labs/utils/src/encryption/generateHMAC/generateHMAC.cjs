'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../_virtual/_tslib.cjs');
var assertDefined = require('../../assertDefined/assertDefined.cjs');

/**
 * Generates an HMAC (Hash-based Message Authentication Code) using SHA-256
 *
 * @param keyData - The secret key used for generating the HMAC
 * @param data - The data to be authenticated
 * @returns A hexadecimal string representation of the HMAC
 *
 * @example
 * const hmac = await generateHMAC('secretKey', 'dataToAuthenticate');
 * console.log(hmac); // outputs: "a1b2c3d4..."
 */
const generateHMAC = (keyData, data) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
    assertDefined.assertDefined(keyData, 'Key data must be a non-empty string');
    assertDefined.assertDefined(data, 'Data must be a non-empty string');
    const textEncoder = new TextEncoder();
    const encodedKeyData = textEncoder.encode(keyData);
    const encodedData = textEncoder.encode(data);
    // Import the key for HMAC using SHA-256
    const key = yield crypto.subtle.importKey('raw', encodedKeyData, { hash: 'SHA-256', name: 'HMAC' }, false, ['sign']);
    // Generate the HMAC signature for the data
    const signature = yield crypto.subtle.sign('HMAC', key, encodedData);
    // Convert the ArrayBuffer signature into a hex string
    const hashArray = Array.from(new Uint8Array(signature));
    const hashHex = hashArray
        .map((b) => b.toString(16).padStart(2, '0'))
        .join('');
    return hashHex;
});

exports.generateHMAC = generateHMAC;
