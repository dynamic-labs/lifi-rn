'use client'
import { __awaiter } from '../../_virtual/_tslib.js';
import { getContract, parseUnits, parseEther, createWalletClient, custom } from 'viem';
import { Wallet } from '@dynamic-labs/wallet-connector-core';
import '@dynamic-labs/utils';
import '../utils/logger.js';
import '../utils/viem/estimateL1Fee/opStack/estimateL1Fee.js';
import '../utils/viem/chainsMap/chainsMap.js';
import { interceptTransport } from '../utils/viem/interceptTransport/interceptTransport.js';
import { erc20Abi } from '../utils/viem/erc20/abi.js';
import 'viem/accounts';
import { getChain } from '../utils/viem/getOrMapViemChain/getOrMapViemChain.js';
import { parseAddress } from '../utils/parseAddress/parseAddress.js';

class EthereumWallet extends Wallet {
    constructor(props) {
        super(Object.assign(Object.assign({}, props), { address: parseAddress(props.address) }));
    }
    /**
     * Sends the native balance of the wallet to the given address.
     * @param amount - The amount of balance to send (in ETH).
     * @param toAddress - The address to send the balance to.
     * @param token - The token to send (optional) â€” for example, an ERC20 token.
     *   @param token.address - The address of the token contract.
     *   @param token.decimals - The decimals of the token (defaults to 18).
     * @returns The transaction hash of the sent transaction.
     */
    sendBalance(_a) {
        return __awaiter(this, arguments, void 0, function* ({ amount, toAddress, token, }) {
            const provider = yield this.getWalletClient();
            if (token && token.address) {
                const erc20Contract = getContract({
                    abi: erc20Abi,
                    address: token.address,
                    client: provider,
                });
                const transfer = yield erc20Contract.write['transfer']([
                    toAddress,
                    parseUnits(amount, token.decimals || 18),
                ]);
                return transfer;
            }
            const transaction = {
                account: this.address,
                chain: getChain(yield provider.getChainId()),
                to: toAddress,
                value: amount ? parseEther(amount) : undefined,
            };
            const transactionHash = yield provider.sendTransaction(transaction);
            return transactionHash;
        });
    }
    /**
     * Retrieves the public client.
     * @returns A promise that resolves to the public client,
     * or throws if the client cannot be retrieved.
     */
    getPublicClient() {
        return __awaiter(this, void 0, void 0, function* () {
            const client = yield this._connector.getPublicClient();
            if (!client) {
                throw new Error('Unable to retrieve PublicClient');
            }
            return client;
        });
    }
    /**
     * Retrieves the wallet client.
     * @param chainId - (optional) Chain id to be used by the wallet client.
     * @returns A promise that resolves to the wallet client,
     * or throws if the client cannot be retrieved.
     */
    getWalletClient(chainId) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            // Set active account if connector supports it, not AA atm
            if ('setActiveAccount' in this._connector) {
                this._connector.setActiveAccount(this.address);
            }
            const walletClient = yield this._connector.getWalletClient(chainId);
            if (!walletClient) {
                throw new Error('Unable to retrieve WalletClient');
            }
            return createWalletClient({
                account: (_a = walletClient.account) !== null && _a !== void 0 ? _a : this.address,
                chain: walletClient.chain,
                transport: interceptTransport({
                    onPersonalSign: (_b) => __awaiter(this, [_b], void 0, function* ({ provider, args }) {
                        yield this.sync();
                        return provider.request(args);
                    }),
                    onSendTransaction: (_c) => __awaiter(this, [_c], void 0, function* ({ provider, args }) {
                        yield this.sync();
                        return provider.request(args);
                    }),
                    onSignTypedData: (_d) => __awaiter(this, [_d], void 0, function* ({ provider, args }) {
                        yield this.sync();
                        return provider.request(args);
                    }),
                    transport: custom(walletClient.transport),
                }),
            });
        });
    }
    getTransportConfig() {
        return this._connector.providersConfig.httpTransportConfig;
    }
}

export { EthereumWallet };
