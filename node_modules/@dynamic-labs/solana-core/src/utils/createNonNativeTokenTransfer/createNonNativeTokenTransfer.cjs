'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../_virtual/_tslib.cjs');
var splToken = require('@solana/spl-token');
var web3_js = require('@solana/web3.js');

const createNonNativeTokenTransfer = (_a) => _tslib.__awaiter(void 0, [_a], void 0, function* ({ connection, fromAddress, toAddress, tokenAddress, amount, decimals, blockhash, lastValidBlockHeight, }) {
    var _b, _c;
    const fromPublicKey = new web3_js.PublicKey(fromAddress);
    const toPublicKey = new web3_js.PublicKey(toAddress);
    const tokenPublicKey = new web3_js.PublicKey(tokenAddress);
    const fromTokenAccount = (_c = (_b = (yield connection.getTokenAccountsByOwner(fromPublicKey, {
        mint: tokenPublicKey,
    }))) === null || _b === void 0 ? void 0 : _b.value[0]) === null || _c === void 0 ? void 0 : _c.pubkey;
    if (!fromTokenAccount)
        throw new Error('Source token account not found');
    let toTokenAccountPubkey;
    const instructions = [];
    try {
        toTokenAccountPubkey = yield splToken.getAssociatedTokenAddress(tokenPublicKey, toPublicKey);
        yield connection.getTokenAccountBalance(toTokenAccountPubkey);
    }
    catch (e) {
        toTokenAccountPubkey = yield splToken.getAssociatedTokenAddress(tokenPublicKey, toPublicKey);
        instructions.push(splToken.createAssociatedTokenAccountInstruction(fromPublicKey, toTokenAccountPubkey, toPublicKey, tokenPublicKey));
    }
    instructions.push(splToken.createTransferInstruction(fromTokenAccount, toTokenAccountPubkey, fromPublicKey, BigInt(Number(amount) * Math.pow(10, (decimals || 0)))));
    const transaction = new web3_js.Transaction().add(...instructions);
    transaction.recentBlockhash = blockhash;
    transaction.lastValidBlockHeight = lastValidBlockHeight;
    transaction.feePayer = fromPublicKey;
    return transaction;
});

exports.createNonNativeTokenTransfer = createNonNativeTokenTransfer;
