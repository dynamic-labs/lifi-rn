'use client'
import { __awaiter } from '../../../_virtual/_tslib.js';
import { getAssociatedTokenAddress, createAssociatedTokenAccountInstruction, createTransferInstruction } from '@solana/spl-token';
import { PublicKey, Transaction } from '@solana/web3.js';

const createNonNativeTokenTransfer = (_a) => __awaiter(void 0, [_a], void 0, function* ({ connection, fromAddress, toAddress, tokenAddress, amount, decimals, blockhash, lastValidBlockHeight, }) {
    var _b, _c;
    const fromPublicKey = new PublicKey(fromAddress);
    const toPublicKey = new PublicKey(toAddress);
    const tokenPublicKey = new PublicKey(tokenAddress);
    const fromTokenAccount = (_c = (_b = (yield connection.getTokenAccountsByOwner(fromPublicKey, {
        mint: tokenPublicKey,
    }))) === null || _b === void 0 ? void 0 : _b.value[0]) === null || _c === void 0 ? void 0 : _c.pubkey;
    if (!fromTokenAccount)
        throw new Error('Source token account not found');
    let toTokenAccountPubkey;
    const instructions = [];
    try {
        toTokenAccountPubkey = yield getAssociatedTokenAddress(tokenPublicKey, toPublicKey);
        yield connection.getTokenAccountBalance(toTokenAccountPubkey);
    }
    catch (e) {
        toTokenAccountPubkey = yield getAssociatedTokenAddress(tokenPublicKey, toPublicKey);
        instructions.push(createAssociatedTokenAccountInstruction(fromPublicKey, toTokenAccountPubkey, toPublicKey, tokenPublicKey));
    }
    instructions.push(createTransferInstruction(fromTokenAccount, toTokenAccountPubkey, fromPublicKey, BigInt(Number(amount) * Math.pow(10, (decimals || 0)))));
    const transaction = new Transaction().add(...instructions);
    transaction.recentBlockhash = blockhash;
    transaction.lastValidBlockHeight = lastValidBlockHeight;
    transaction.feePayer = fromPublicKey;
    return transaction;
});

export { createNonNativeTokenTransfer };
