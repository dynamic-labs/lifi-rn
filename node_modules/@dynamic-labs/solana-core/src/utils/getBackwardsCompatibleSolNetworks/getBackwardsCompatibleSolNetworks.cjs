'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var getOverrideRpcUrlForNetwork = require('../getOverrideRpcUrlForNetwork/getOverrideRpcUrlForNetwork.cjs');

const SOLANA_MAINNET_NETWORK = {
    blockExplorerUrls: ['https://explorer.solana.com'],
    chainId: '101',
    cluster: 'mainnet-beta',
    genesisHash: '5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp',
    iconUrls: ['https://app.dynamic.xyz/assets/networks/solana.svg'],
    isTestnet: false,
    key: 'solana',
    name: 'Solana Mainnet',
    nativeCurrency: {
        decimals: 9,
        iconUrl: 'https://app.dynamic.xyz/assets/networks/solana.svg',
        name: 'Solana',
        pricingProviderTokenId: 'solana',
        symbol: 'SOL',
    },
    networkId: '101',
    rpcUrls: ['https://api.mainnet-beta.solana.com'],
    vanityName: 'Solana',
};
const SOLANA_TESTNET_NETWORK = {
    blockExplorerUrls: ['https://explorer.solana.com/?cluster=testnet'],
    chainId: '102',
    cluster: 'testnet',
    genesisHash: '4uhcVJyU9pJkvQyS88uRDiswHXSCkY3z',
    iconUrls: ['https://app.dynamic.xyz/assets/networks/solana.svg'],
    isTestnet: true,
    key: 'solana',
    name: 'Solana Testnet',
    nativeCurrency: {
        decimals: 9,
        iconUrl: 'https://app.dynamic.xyz/assets/networks/solana.svg',
        name: 'Solana',
        pricingProviderTokenId: 'solana',
        symbol: 'SOL',
    },
    networkId: '102',
    rpcUrls: ['https://api.testnet.solana.com'],
};
const SOLANA_DEVNET_NETWORK = {
    blockExplorerUrls: ['https://explorer.solana.com/?cluster=devnet'],
    chainId: '103',
    cluster: 'devnet',
    genesisHash: 'EtWTRABZaYq6iMfeYKouRu166VU2xqa1',
    iconUrls: ['https://app.dynamic.xyz/assets/networks/solana.svg'],
    isTestnet: true,
    key: 'solana',
    name: 'Solana Devnet',
    nativeCurrency: {
        decimals: 9,
        iconUrl: 'https://app.dynamic.xyz/assets/networks/solana.svg',
        name: 'Solana',
        pricingProviderTokenId: 'solana',
        symbol: 'SOL',
    },
    networkId: '103',
    rpcUrls: ['https://api.devnet.solana.com'],
};
const getBackwardsCompatibleSolNetworks = (originalSolNetworks, connectionConfig) => {
    if (!(originalSolNetworks === null || originalSolNetworks === void 0 ? void 0 : originalSolNetworks.length)) {
        return [];
    }
    // if we have more than one network or if the chainId is not 101,
    // it means the correct rpc should have already been set in the dashboard
    if (originalSolNetworks.length > 1 ||
        originalSolNetworks[0].chainId !== '101') {
        return originalSolNetworks;
    }
    // because we didn't have multi-network support in the past,
    // customer would just pass in testnet/devnet rpc urls to the mainnet network
    // so we need to check the rpc and return the correct/expected network data
    const rpcUrl = getOverrideRpcUrlForNetwork.getOverrideRpcUrlForNetwork(connectionConfig, originalSolNetworks[0]);
    if (rpcUrl.includes('testnet')) {
        return [
            Object.assign(Object.assign({}, SOLANA_TESTNET_NETWORK), { privateCustomerRpcUrls: [rpcUrl] }),
        ];
    }
    if (rpcUrl.includes('devnet')) {
        return [
            Object.assign(Object.assign({}, SOLANA_DEVNET_NETWORK), { privateCustomerRpcUrls: [rpcUrl] }),
        ];
    }
    if (rpcUrl.includes('mainnet')) {
        return [
            Object.assign(Object.assign({}, SOLANA_MAINNET_NETWORK), { privateCustomerRpcUrls: [rpcUrl] }),
        ];
    }
    return originalSolNetworks;
};

exports.getBackwardsCompatibleSolNetworks = getBackwardsCompatibleSolNetworks;
