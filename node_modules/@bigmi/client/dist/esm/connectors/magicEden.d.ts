import { type Account } from '@bigmi/core';
import type { UTXOConnectorParameters, UTXOWalletProvider } from './types.js';
export type MagicEdenBitcoinEventMap = {
    accountsChanged(accounts: Account[]): void;
};
export type MagicEdenBitcoinEvents = {
    addListener<TEvent extends keyof MagicEdenBitcoinEventMap>(event: TEvent, listener: MagicEdenBitcoinEventMap[TEvent]): void;
    removeListener<TEvent extends keyof MagicEdenBitcoinEventMap>(event: TEvent, listener: MagicEdenBitcoinEventMap[TEvent]): void;
};
type MagicEdenConnectorProperties = {
    getAccounts(): Promise<readonly Account[]>;
    onAccountsChanged(accounts: Account[]): void;
    getInternalProvider(): Promise<MagicEdenBitcoinProvider>;
} & UTXOWalletProvider;
type MagicEdenBitcoinProvider = {
    connect(encodedRequest: string): Promise<{
        addresses: Account[];
    }>;
    signTransaction(encodedRequest: string): Promise<{
        psbtBase64: string;
        txId?: string;
    }>;
} & MagicEdenBitcoinEvents;
export declare function magicEden(parameters?: UTXOConnectorParameters): import("../index.js").CreateConnectorFn<UTXOWalletProvider | undefined, MagicEdenConnectorProperties, Record<string, unknown>>;
export declare namespace magicEden {
    var type: "UTXO";
}
export {};
