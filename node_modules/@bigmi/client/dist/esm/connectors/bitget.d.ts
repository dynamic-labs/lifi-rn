import { type Account, type Address } from '@bigmi/core';
import type { UTXOConnectorParameters, UTXOWalletProvider } from './types.js';
export type BitgetBitcoinEventMap = {
    accountsChanged(accounts: Address[]): void;
};
export type BitgetBitcoinEvents = {
    addListener<TEvent extends keyof BitgetBitcoinEventMap>(event: TEvent, listener: BitgetBitcoinEventMap[TEvent]): void;
    removeListener<TEvent extends keyof BitgetBitcoinEventMap>(event: TEvent, listener: BitgetBitcoinEventMap[TEvent]): void;
};
type BitgetConnectorProperties = {
    getAccounts(): Promise<readonly Account[]>;
    onAccountsChanged(accounts: Address[]): void;
    getInternalProvider(): Promise<BitgetBitcoinProvider>;
} & UTXOWalletProvider;
type BitgetBitcoinProvider = {
    requestAccounts(): Promise<Address[]>;
    getAccounts(): Promise<Address[]>;
    getPublicKey(): Promise<string>;
    signPsbt(psbtHex: string, options: {
        toSignInputs: {
            index: number;
            address: string;
            sighashTypes?: number[];
        }[];
        autoFinalized?: boolean;
    }): Promise<string>;
} & BitgetBitcoinEvents;
export declare function bitget(parameters?: UTXOConnectorParameters): import("../index.js").CreateConnectorFn<UTXOWalletProvider | undefined, BitgetConnectorProperties, Record<string, unknown>>;
export declare namespace bitget {
    var type: "UTXO";
}
export {};
