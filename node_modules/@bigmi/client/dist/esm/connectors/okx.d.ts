import type { Account, Address } from '@bigmi/core';
import type { UTXOConnectorParameters, UTXOWalletProvider } from './types.js';
export type OKXBitcoinEventMap = {
    accountsChanged(accounts: Address[]): void;
    accountChanged(account: {
        address: Address;
        publicKey: string;
        compressedPublicKey: string;
    }): void;
};
export type OKXBitcoinEvents = {
    addListener<TEvent extends keyof OKXBitcoinEventMap>(event: TEvent, listener: OKXBitcoinEventMap[TEvent]): void;
    removeListener<TEvent extends keyof OKXBitcoinEventMap>(event: TEvent, listener: OKXBitcoinEventMap[TEvent]): void;
};
type OKXConnectorProperties = {
    getAccounts(): Promise<readonly Account[]>;
    onAccountsChanged(accounts: Address[]): void;
    getInternalProvider(): Promise<OKXBitcoinProvider>;
} & UTXOWalletProvider;
type OKXBitcoinProvider = {
    requestAccounts(): Promise<Address[]>;
    getAccounts(): Promise<Address[]>;
    getPublicKey(): Promise<string>;
    connect(): Promise<{
        address: Address;
        publicKey: string;
    }>;
    signPsbt(psbtHex: string, options: {
        toSignInputs: {
            index: number;
            address: string;
            sighashTypes?: number[];
        }[];
        autoFinalized?: boolean;
    }): Promise<string>;
} & OKXBitcoinEvents;
export declare function okx(parameters?: UTXOConnectorParameters): import("../index.js").CreateConnectorFn<UTXOWalletProvider | undefined, OKXConnectorProperties, Record<string, unknown>>;
export declare namespace okx {
    var type: "UTXO";
}
export {};
