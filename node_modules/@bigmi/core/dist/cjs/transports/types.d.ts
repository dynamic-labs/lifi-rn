import type { BlockStats, BlockStatsKeys } from '../types/blockStats.js';
import type { UTXO, UTXOTransaction } from '../types/transaction.js';
import type { HttpRpcClient } from './getHttpRpcClient.js';
export declare const UTXOAPISchemaMethods: UTXOMethod[];
export type UTXOAPISchema = [
    {
        Method: 'getBalance';
        Parameters: {
            address: string;
        };
        ReturnType: bigint;
    },
    {
        Method: 'getTransactions';
        Parameters: {
            address: string;
            offset?: number;
            limit?: number;
            lastBlock?: string;
            afterTxId?: string;
        };
        ReturnType: {
            transactions: Array<Partial<UTXOTransaction>>;
            total: number;
            hasMore?: boolean;
        };
    },
    {
        Method: 'getTransactionFee';
        Parameters: {
            txId: string;
        };
        ReturnType: bigint;
    },
    {
        Method: 'getUTXOs';
        Parameters: {
            address: string;
            minValue?: number;
        };
        ReturnType: Array<UTXO>;
    }
];
export type UTXOSchema = [
    {
        Method: 'getblockcount';
        Parameters: [];
        ReturnType: number;
    },
    {
        Method: 'getblockhash';
        Parameters: [number];
        ReturnType: string;
    },
    {
        Method: 'getblock';
        Parameters: [string, number];
        ReturnType: string;
    },
    {
        Method: 'getblockstats';
        Parameters: [string | number, Array<BlockStatsKeys>?];
        ReturnType: BlockStats;
    },
    {
        Method: 'sendrawtransaction';
        Parameters: [string, number?];
        ReturnType: string;
    },
    {
        Method: 'getrawtransaction';
        Parameters: [string, boolean, string?];
        ReturnType: UTXOTransaction;
    },
    ...UTXOAPISchema
];
export type UTXOMethod = UTXOSchema[number]['Method'];
export type SignPsbtParameters = {
    psbt: string;
    inputsToSign: {
        sigHash?: number;
        address: string;
        signingIndexes: number[];
    }[];
    finalize?: boolean;
};
export type SignPsbtReturnType = string;
export type UTXOWalletSchema = readonly [
    {
        Method: 'signPsbt';
        Parameters: SignPsbtParameters;
        ReturnType: SignPsbtReturnType;
    }
];
export type SuccessResult<result> = {
    method?: undefined;
    result: result;
    error?: undefined;
};
export type ErrorResult<error> = {
    method?: undefined;
    result?: undefined;
    error: error;
};
export type RpcResponse<result = any, error = any> = SuccessResult<result> | ErrorResult<error>;
export type RpcMethodHandler<M extends UTXOMethod = UTXOMethod> = (client: HttpRpcClient, config: {
    baseUrl: string;
    apiKey?: string;
}, params: Extract<UTXOSchema[number], {
    Method: M;
}>['Parameters']) => Promise<RpcResponse<Extract<UTXOSchema[number], {
    Method: M;
}>['ReturnType']>>;
export type RpcMethods = {
    [key in UTXOMethod]?: RpcMethodHandler<key>;
};
