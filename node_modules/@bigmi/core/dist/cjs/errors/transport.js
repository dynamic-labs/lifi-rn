"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AllTransportsFailedError = exports.TransportMethodNotSupportedError = exports.UrlRequiredError = void 0;
const base_js_1 = require("./base.js");
class UrlRequiredError extends base_js_1.BaseError {
    constructor() {
        super('No URL was provided to the Transport. Please provide a valid RPC URL to the Transport.', {
            name: 'UrlRequiredError',
        });
    }
}
exports.UrlRequiredError = UrlRequiredError;
class TransportMethodNotSupportedError extends base_js_1.BaseError {
    constructor({ method }) {
        super(`No transport found that supports the method: ${method}`, {
            name: 'TransportMethodNotSupportedError',
        });
    }
}
exports.TransportMethodNotSupportedError = TransportMethodNotSupportedError;
class AllTransportsFailedError extends base_js_1.BaseError {
    constructor({ method, params, errors, totalAttempts, }) {
        const errorMessages = errors
            .map(({ transport, error, attempt }) => `${attempt}. ${transport}: ${error.message}`)
            .join('\n');
        super(`All ${totalAttempts} transports failed for method "${method}": \n${errorMessages}`, {
            name: 'AllTransportsFailedError',
            metaMessages: [
                `Method: ${method}`,
                `Total attempts: ${totalAttempts}`,
                `Failed transports: ${errors.map((e) => e.transport).join(', ')}`,
            ],
        });
        this.method = method;
        this.params = params;
        this.errors = errors;
        this.totalAttempts = totalAttempts;
    }
}
exports.AllTransportsFailedError = AllTransportsFailedError;
//# sourceMappingURL=transport.js.map