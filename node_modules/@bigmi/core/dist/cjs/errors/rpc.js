"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ParseError = exports.MethodNotSupportedRpcError = exports.UserRejectedRequestError = exports.RpcErrorCode = void 0;
const base_js_1 = require("./base.js");
var RpcErrorCode;
(function (RpcErrorCode) {
    RpcErrorCode[RpcErrorCode["PARSE_ERROR"] = -32700] = "PARSE_ERROR";
    RpcErrorCode[RpcErrorCode["INVALID_REQUEST"] = -32600] = "INVALID_REQUEST";
    RpcErrorCode[RpcErrorCode["METHOD_NOT_FOUND"] = -32601] = "METHOD_NOT_FOUND";
    RpcErrorCode[RpcErrorCode["INVALID_PARAMS"] = -32602] = "INVALID_PARAMS";
    RpcErrorCode[RpcErrorCode["INTERNAL_ERROR"] = -32603] = "INTERNAL_ERROR";
    RpcErrorCode[RpcErrorCode["USER_REJECTION"] = -32000] = "USER_REJECTION";
    RpcErrorCode[RpcErrorCode["METHOD_NOT_SUPPORTED"] = -32001] = "METHOD_NOT_SUPPORTED";
    RpcErrorCode[RpcErrorCode["ACCESS_DENIED"] = -32002] = "ACCESS_DENIED";
    RpcErrorCode[RpcErrorCode["MISC_ERROR"] = -1] = "MISC_ERROR";
})(RpcErrorCode || (exports.RpcErrorCode = RpcErrorCode = {}));
class UserRejectedRequestError extends base_js_1.BaseError {
    constructor(message) {
        const name = 'UserRejectedRequestError';
        const errMessage = message || 'The user rejected your request, please try again';
        super(`${name}:  ${errMessage}`, {
            name,
        });
        this.code = RpcErrorCode.USER_REJECTION;
    }
}
exports.UserRejectedRequestError = UserRejectedRequestError;
class MethodNotSupportedRpcError extends base_js_1.BaseError {
    constructor(method) {
        const name = 'MethodNotSupportedError';
        const message = `The method ${method} you are calling is not supported`;
        super(`${name}: ${message}`, {
            name,
        });
        this.code = RpcErrorCode.METHOD_NOT_SUPPORTED;
    }
}
exports.MethodNotSupportedRpcError = MethodNotSupportedRpcError;
class ParseError extends base_js_1.BaseError {
    constructor(message) {
        const name = 'ParseError';
        const errMessage = message || 'Invalid JSON, there was an error parsing your request.';
        super(`${name}: ${errMessage}`, {
            name,
        });
        this.code = RpcErrorCode.PARSE_ERROR;
    }
}
exports.ParseError = ParseError;
//# sourceMappingURL=rpc.js.map