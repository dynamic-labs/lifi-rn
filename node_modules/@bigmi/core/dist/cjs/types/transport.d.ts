import type { ErrorType } from '../errors/utils.js';
import type { UTXOMethod } from '../transports/types.js';
import type { Chain } from './chain.js';
import type { BtcRpcRequestFn, RpcSchema } from './request.js';
import type { OneOf } from './utils.js';
export type TransportConfig<type extends string = string, rpcRequestFn extends BtcRpcRequestFn = BtcRpcRequestFn> = {
    name: string;
    key: string;
    methods?: OneOf<{
        include?: UTXOMethod[] | undefined;
    } | {
        exclude?: UTXOMethod[] | undefined;
    }> | undefined;
    request: rpcRequestFn;
    retryDelay?: number | undefined;
    retryCount?: number | undefined;
    timeout?: number | undefined;
    type: type;
};
export type Transport<type extends string = string, rpcAttributes = Record<string, any>, rpcRequestFn extends BtcRpcRequestFn = BtcRpcRequestFn<RpcSchema>> = <chain extends Chain | undefined = Chain>({ chain, }: {
    chain?: chain | undefined;
    pollingInterval?: number | undefined;
    retryCount?: TransportConfig['retryCount'] | undefined;
    timeout?: TransportConfig['timeout'] | undefined;
}) => {
    config: TransportConfig<type>;
    request: rpcRequestFn;
    value?: rpcAttributes | undefined;
};
export type CreateTransportErrorType = ErrorType;
