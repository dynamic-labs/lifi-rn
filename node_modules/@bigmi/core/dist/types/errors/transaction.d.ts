import type { BlockTag } from '../types/block.js';
import type { Hash } from '../types/hash.js';
import { BaseError } from './base.js';
export type TransactionNotFoundErrorType = TransactionNotFoundError & {
    name: 'TransactionNotFoundError';
};
export declare class TransactionNotFoundError extends BaseError {
    constructor({ blockHash, blockNumber, blockTag, hash, index, }: {
        blockHash?: Hash | undefined;
        blockNumber?: bigint | undefined;
        blockTag?: BlockTag | undefined;
        hash?: Hash | undefined;
        index?: number | undefined;
    });
}
export type TransactionReceiptNotFoundErrorType = TransactionReceiptNotFoundError & {
    name: 'TransactionReceiptNotFoundError';
};
export declare class TransactionReceiptNotFoundError extends BaseError {
    constructor({ hash }: {
        hash: Hash;
    });
}
export type WaitForTransactionReceiptTimeoutErrorType = WaitForTransactionReceiptTimeoutError & {
    name: 'WaitForTransactionReceiptTimeoutError';
};
export declare class WaitForTransactionReceiptTimeoutError extends BaseError {
    constructor({ hash }: {
        hash: Hash;
    });
}
//# sourceMappingURL=transaction.d.ts.map